3c3
< // TriFadcCherenkov                                                              //
---
> // TriFadcAerogelC                                                           //
9c9
< #include "TriFadcCherenkov.h"
---
> #include "TriFadcAerogelC.h"
27c27
< TriFadcCherenkov::TriFadcCherenkov( const char* name, const char* description,
---
> TriFadcAerogelC::TriFadcAerogelC( const char* name, const char* description,
38c38
< TriFadcCherenkov::TriFadcCherenkov()
---
> TriFadcAerogelC::TriFadcAerogelC()
46c46
< Int_t TriFadcCherenkov::ReadDatabase( const TDatime& date )
---
> Int_t TriFadcAerogelC::ReadDatabase( const TDatime& date )
180c180
< Int_t TriFadcCherenkov::DefineVariables( EMode mode )
---
> Int_t TriFadcAerogelC::DefineVariables( EMode mode )
188,189c188,189
<     { "nthit",  "Number of Left paddles TDC times",  "fNThit" },
<     { "nahit",  "Number of Right paddles TDC times", "fNAhit" },
---
>     //{ "nthit",  "Number of Left paddles TDC times",  "fNThit" },
>     //{ "nahit",  "Number of Right paddles TDC times", "fNAhit" },
191,194c191,194
<     { "t_c",    "Corrected TDC values",              "fT_c" },
<     { "a",      "ADC values",                        "fA" },
<     { "a_p",    "Ped-subtracted ADC values ",        "fA_p" },
<     { "a_c",    "Corrected ADC values",              "fA_c" },
---
>     //{ "t_c",    "Corrected TDC values",              "fT_c" },
>     //{ "a",      "ADC values",                        "fA" },
>     //{ "a_p",    "Ped-subtracted ADC values ",        "fA_p" },
>     { "a_c",    "Corrected ADC values",              "fA_c" }, // This is already NEP
197,199c197,199
<     { "tc_fadc", "FADC corrected TDC values",        "fT_FADC_c" },
<     { "asum_p", "Sum of ADC minus pedestal values",  "fASUM_p" },
<     { "asum_c", "Sum of corrected ADC amplitudes",   "fASUM_c" },
---
>     //{ "tc_fadc", "FADC corrected TDC values",        "fT_FADC_c" },
>     //{ "asum_p", "Sum of ADC minus pedestal values",  "fASUM_p" },
>     { "asum_c", "Sum of corrected ADC amplitudes",   "fASUM_c" }, // NPE sum
202,205c202,205
<     { "trpath", "TRCS pathlen of track to det plane","fTrackProj.THaTrackProj.fPathl" },
<     { "noverflow",  "overflow bit of FADC pulse",    "foverflow" },
<     { "nunderflow",  "underflow bit of FADC pulse",  "funderflow" },
<     { "nbadped",  "pedestal quality bit of FADC pulse",   "fpedq" },
---
>     //{ "trpath", "TRCS pathlen of track to det plane","fTrackProj.THaTrackProj.fPathl" },
>     //{ "noverflow",  "overflow bit of FADC pulse",    "foverflow" },
>     //{ "nunderflow",  "underflow bit of FADC pulse",  "funderflow" },
>     //{ "nbadped",  "pedestal quality bit of FADC pulse",   "fpedq" },
213c213
< TriFadcCherenkov::~TriFadcCherenkov()
---
> TriFadcAerogelC::~TriFadcAerogelC()
225c225
< void TriFadcCherenkov::DeleteArrays()
---
> void TriFadcAerogelC::DeleteArrays()
249c249
< void TriFadcCherenkov::Clear( Option_t* opt )
---
> void TriFadcAerogelC::Clear( Option_t* opt )
272c272
< Int_t TriFadcCherenkov::Decode( const THaEvData& evdata )
---
> Int_t TriFadcAerogelC::Decode( const THaEvData& evdata )
274c274
<   // Decode Cherenkov data, correct TDC times and ADC amplitudes, and copy
---
>   // Decode AerogelC data, correct TDC times and ADC amplitudes, and copy
279c279
<   // Loop over all modules defined for Cherenkov detector
---
>   // Loop over all modules defined for AerogelC detector
348c348
< 	fA_c[k] = fA_p[k] * fGain[k];
---
> 	fA_c[k] = fA_p[k] * fGain[k]; // The number of photoelectrons
350c350,351
< 	if( fA_p[k] > 0.0 )
---
> 	//if( fA_p[k] > 0.0 ){
> 	if( fA_p[k] > -500.0 ){ // Oct6_2018, TG
352c353,355
< 	if( fA_c[k] > 0.0 )
---
> 	}
> 	//if( fA_c[k] > 0.0 ){
> 	if( fA_c[k] > -10.0 ){ // Oct6_2018, TG
353a357
> 	}

362c366
< 
---
>   
364c368
<     printf("\nCherenkov %s:\n",GetPrefix());
---
>     printf("\nAerogelC %s:\n",GetPrefix());
389c393
< Int_t TriFadcCherenkov::CoarseProcess( TClonesArray& tracks )
---
> Int_t TriFadcAerogelC::CoarseProcess( TClonesArray& tracks )
392c396
<   // the Cherenkov plane, and copy the point into the fTrackProj array.
---
>   // the AerogelC plane, and copy the point into the fTrackProj array.
400c404
< Int_t TriFadcCherenkov::FineProcess( TClonesArray& tracks )
---
> Int_t TriFadcAerogelC::FineProcess( TClonesArray& tracks )
402c406
<   // Fine Cherenkov processing
---
>   // Fine AerogelC processing
413c417
< ClassImp(TriFadcCherenkov)
---
> ClassImp(TriFadcAerogelC)
TriFadcCherenkov.cxx:// TriFadcCherenkov                                                              //
TriFadcCherenkov.cxx:#include "TriFadcCherenkov.h"
TriFadcCherenkov.cxx:TriFadcCherenkov::TriFadcCherenkov( const char* name, const char* description,
TriFadcCherenkov.cxx:TriFadcCherenkov::TriFadcCherenkov()
TriFadcCherenkov.cxx:Int_t TriFadcCherenkov::ReadDatabase( const TDatime& date )
TriFadcCherenkov.cxx:Int_t TriFadcCherenkov::DefineVariables( EMode mode )
TriFadcCherenkov.cxx:TriFadcCherenkov::~TriFadcCherenkov()
TriFadcCherenkov.cxx:void TriFadcCherenkov::DeleteArrays()
TriFadcCherenkov.cxx:void TriFadcCherenkov::Clear( Option_t* opt )
TriFadcCherenkov.cxx:Int_t TriFadcCherenkov::Decode( const THaEvData& evdata )
TriFadcCherenkov.cxx:Int_t TriFadcCherenkov::CoarseProcess( TClonesArray& tracks )
TriFadcCherenkov.cxx:Int_t TriFadcCherenkov::FineProcess( TClonesArray& tracks )
TriFadcCherenkov.cxx:ClassImp(TriFadcCherenkov)
TritonDict.cxx:#include "TriFadcCherenkov.h"
TritonDict.cxx:   static void *new_TriFadcCherenkov(void *p = 0);
TritonDict.cxx:   static void *newArray_TriFadcCherenkov(Long_t size, void *p);
TritonDict.cxx:   static void delete_TriFadcCherenkov(void *p);
TritonDict.cxx:   static void deleteArray_TriFadcCherenkov(void *p);
TritonDict.cxx:   static void destruct_TriFadcCherenkov(void *p);
TritonDict.cxx:   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TriFadcCherenkov*)
TritonDict.cxx:      ::TriFadcCherenkov *ptr = 0;
TritonDict.cxx:      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TriFadcCherenkov >(0);
TritonDict.cxx:         instance("TriFadcCherenkov", ::TriFadcCherenkov::Class_Version(), "TriFadcCherenkov.h", 17,
TritonDict.cxx:                  typeid(::TriFadcCherenkov), ::ROOT::Internal::DefineBehavior(ptr, ptr),
TritonDict.cxx:                  &::TriFadcCherenkov::Dictionary, isa_proxy, 4,
TritonDict.cxx:                  sizeof(::TriFadcCherenkov) );
TritonDict.cxx:      instance.SetNew(&new_TriFadcCherenkov);
TritonDict.cxx:      instance.SetNewArray(&newArray_TriFadcCherenkov);
TritonDict.cxx:      instance.SetDelete(&delete_TriFadcCherenkov);
TritonDict.cxx:      instance.SetDeleteArray(&deleteArray_TriFadcCherenkov);
TritonDict.cxx:      instance.SetDestructor(&destruct_TriFadcCherenkov);
TritonDict.cxx:   TGenericClassInfo *GenerateInitInstance(const ::TriFadcCherenkov*)
TritonDict.cxx:      return GenerateInitInstanceLocal((::TriFadcCherenkov*)0);
TritonDict.cxx:   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const ::TriFadcCherenkov*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));
TritonDict.cxx:atomic_TClass_ptr TriFadcCherenkov::fgIsA(0);  // static to hold class pointer
TritonDict.cxx:const char *TriFadcCherenkov::Class_Name()
TritonDict.cxx:   return "TriFadcCherenkov";
TritonDict.cxx:const char *TriFadcCherenkov::ImplFileName()
TritonDict.cxx:   return ::ROOT::GenerateInitInstanceLocal((const ::TriFadcCherenkov*)0x0)->GetImplFileName();
TritonDict.cxx:int TriFadcCherenkov::ImplFileLine()
TritonDict.cxx:   return ::ROOT::GenerateInitInstanceLocal((const ::TriFadcCherenkov*)0x0)->GetImplFileLine();
TritonDict.cxx:TClass *TriFadcCherenkov::Dictionary()
TritonDict.cxx:   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriFadcCherenkov*)0x0)->GetClass();
TritonDict.cxx:TClass *TriFadcCherenkov::Class()
TritonDict.cxx:   if (!fgIsA.load()) { R__LOCKGUARD(gInterpreterMutex); fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TriFadcCherenkov*)0x0)->GetClass(); }
TritonDict.cxx:void TriFadcCherenkov::Streamer(TBuffer &R__b)
TritonDict.cxx:   // Stream an object of class TriFadcCherenkov.
TritonDict.cxx:      R__b.ReadClassBuffer(TriFadcCherenkov::Class(),this);
TritonDict.cxx:      R__b.WriteClassBuffer(TriFadcCherenkov::Class(),this);
TritonDict.cxx:   static void *new_TriFadcCherenkov(void *p) {
TritonDict.cxx:      return  p ? new(p) ::TriFadcCherenkov : new ::TriFadcCherenkov;
TritonDict.cxx:   static void *newArray_TriFadcCherenkov(Long_t nElements, void *p) {
TritonDict.cxx:      return p ? new(p) ::TriFadcCherenkov[nElements] : new ::TriFadcCherenkov[nElements];
TritonDict.cxx:   static void delete_TriFadcCherenkov(void *p) {
TritonDict.cxx:      delete ((::TriFadcCherenkov*)p);
TritonDict.cxx:   static void deleteArray_TriFadcCherenkov(void *p) {
TritonDict.cxx:      delete [] ((::TriFadcCherenkov*)p);
TritonDict.cxx:   static void destruct_TriFadcCherenkov(void *p) {
TritonDict.cxx:      typedef ::TriFadcCherenkov current_t;
TritonDict.cxx:} // end of namespace ROOT for class ::TriFadcCherenkov
TritonDict.cxx:"TriFadcCherenkov.h",
TritonDict.cxx:class __attribute__((annotate(R"ATTRDUMP(Generic Cherenkov class)ATTRDUMP"))) __attribute__((annotate("$clingAutoload$TriFadcCherenkov.h")))  TriFadcCherenkov;
TritonDict.cxx:#include "TriFadcCherenkov.h"
TritonDict.cxx:"TriFadcCherenkov", payloadCode, "@",
